#!/bin/bash

# List of Pokémon to retrieve
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# API configuration
api_base="https://pokeapi.co/api/v2/pokemon"
max_parallel=3
request_delay=1

# Error handling
error_log="pokemon_errors.log"
> "$error_log"

# Function to fetch and save Pokémon data
fetch_pokemon() {
    local pokemon=$1
    local filename="${pokemon}.json"
    local max_retries=3

    for ((i=1; i<=max_retries; i++)); do
        if response=$(curl -s -w "%{http_code}" "${api_base}/${pokemon}" 2>/dev/null); then
            http_code=${response: -3}
            body=${response:0:-3}

            if [ "$http_code" -eq 200 ]; then
                echo "$body" > "$filename"
                echo "  Success: ${pokemon^} saved to $filename"
                return 0
            fi
        fi

        if [ $i -lt $max_retries ]; then
            sleep $request_delay
        fi
    done

    error_msg="[$(date +'%Y-%m-%d %H:%M:%S')] Failed to fetch ${pokemon} after ${max_retries} attempts"
    echo "$error_msg" >> "$error_log"
    echo "  Error: $error_msg"
    echo "{\"error\": \"$error_msg\"}" > "$filename"
    return 1
}

# Main execution
echo "Starting parallel Pokémon data fetch (max $max_parallel concurrent requests)..."

# Process all Pokémon in background
for pokemon in "${pokemon_list[@]}"; do
    while [ $(jobs -r | wc -l) -ge $max_parallel ]; do
        sleep 0.1
    done

    echo "Processing ${pokemon^}..."
    fetch_pokemon "$pokemon" &
done

# Wait for all background jobs to complete
wait

# Clean up any remaining processes if needed
for job in $(jobs -p); do
    kill "$job" 2>/dev/null
done

echo -e "\nAll Pokémon data processed. Error log: $error_log"